{"domain": [{"api": "com.nicefish.cms.controller.PostController.writePost", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "import re\nfrom urllib.parse import urlparse\n\nSQL_INJECTION_RE = re.compile(r\"(SELECT|UPDATE|DELETE|INSERT)\", re.IGNORECASE)\nDATE_RE = re.compile(r\"^[A-Za-z]{3} \\d{1,2}, \\d{4}, \\d{1,2}:\\d{2}:\\d{2}\\s[AP]M$\")\nEMAIL_RE = re.compile(r\"^[^@]+@[^@]+\\.[^@]+$\")\nFILE_SUFFIX_RE = re.compile(r\"^[a-zA-Z0-9]+$\")\n\ndef check(log: dict) -> bool:\n    post_entity = log[\"arguments\"][\"postEntity\"]\n    \n    # Format Check\n    assert DATE_RE.match(post_entity[\"postTime\"]), \"postTime should follow the date format\"\n    assert DATE_RE.match(post_entity[\"updateTime\"]), \"updateTime should follow the date format\"\n    if post_entity[\"email\"] is not None:\n        assert EMAIL_RE.match(post_entity[\"email\"]), \"email should be a valid email format\"\n    if post_entity[\"originalURL\"]:\n        assert urlparse(post_entity[\"originalURL\"]).scheme in [\"http\", \"https\"], \"originalURL should be a valid URL format\"\n    for file_entity in post_entity[\"fileUploadEntities\"]:\n        assert FILE_SUFFIX_RE.match(file_entity[\"fileSuffix\"]), \"fileSuffix should be a valid file extension format\"\n    \n    # Vulnerability Check\n    assert not SQL_INJECTION_RE.search(post_entity[\"content\"]), \"content should not contain SQL injection features\"\n    assert not SQL_INJECTION_RE.search(post_entity[\"title\"]), \"title should not contain SQL injection features\"\n    assert not SQL_INJECTION_RE.search(post_entity[\"originalURL\"]), \"originalURL should not contain SQL injection features\"\n    for file_entity in post_entity[\"fileUploadEntities\"]:\n        assert not SQL_INJECTION_RE.search(file_entity[\"fileName\"]), \"fileName should not contain SQL injection features\"\n    \n    # Range Check\n    assert post_entity[\"readTimes\"] >= 0, \"readTimes should be non-negative\"\n    assert post_entity[\"likedTimes\"] >= 0, \"likedTimes should be non-negative\"\n    assert post_entity[\"commentTimes\"] >= 0, \"commentTimes should be non-negative\"\n    assert 0 <= post_entity[\"status\"] <= 4, \"status should be between 0 and 4\"\n    \n    # Argument and Database Status Check\n    assert post_entity[\"status\"] == 4, \"status should be equal to 4 (Past status feedback: 4)\"\n    \n    # Environment Integrity Check\n    if post_entity[\"userId\"] is not None:\n        assert post_entity[\"userId\"] == int(log[\"env\"][\"userId\"]), \"userId in postEntity should match userId in env\"\n    \n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.cms.controller.UserPostRelationController.saveUserPostRelation", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "import re\nfrom datetime import datetime\n\nSQL_INJECTION_RE = re.compile(r\"(SELECT|UPDATE|DELETE|INSERT)\")\n\ndef check(log: dict) -> bool:\n    # Format Check for time\n    try:\n        datetime.strptime(log[\"arguments\"][\"userPostRelation\"][\"time\"], \"%b %d, %Y, %I:%M:%S %p\")\n    except ValueError:\n        raise ValueError(\"time should be in the format 'MMM dd, yyyy, h:mm:ss a'\")\n    \n    # Format Check for userId in env\n    assert isinstance(log[\"env\"][\"userId\"], str) and log[\"env\"][\"userId\"].isdigit(), \"userId in env should be a string representation of an integer\"\n    \n    # Vulnerability Check for time\n    assert not SQL_INJECTION_RE.search(log[\"arguments\"][\"userPostRelation\"][\"time\"]), \"time should not contain any SQL injection features\"\n    \n    # Range Check for relationType\n    assert isinstance(log[\"arguments\"][\"userPostRelation\"][\"relationType\"], int), \"relationType should be an integer\"\n    assert log[\"arguments\"][\"userPostRelation\"][\"relationType\"] > 0, \"relationType should be a positive integer\"\n    \n    # Environment Integrity Check\n    assert int(log[\"env\"][\"userId\"]) == log[\"arguments\"][\"userPostRelation\"][\"userId\"], \"userId in arguments should match userId in env\"\n    \n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.cms.controller.UserPostRelationController.findUserRelatedPosts", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "from datetime import datetime\n\ndef check(log: dict) -> bool:\n    # Check if userId is an integer\n    assert isinstance(log[\"arguments\"][\"userPostRelation\"][\"userId\"], int), \"userId should be an integer\"\n    \n    # Check if relationType is an integer\n    assert isinstance(log[\"arguments\"][\"userPostRelation\"][\"relationType\"], int), \"relationType should be an integer\"\n    \n    # Check if time is a valid date string\n    try:\n        datetime.strptime(log[\"arguments\"][\"userPostRelation\"][\"time\"], \"%b %d, %Y, %I:%M:%S %p\")\n    except ValueError:\n        raise AssertionError(\"time should be a valid date string\")\n    \n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.cms.controller.UserPostRelationController.deleteUserPostRelation", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "import re\nfrom datetime import datetime\n\nSQL_INJECTION_RE = re.compile(r\"(SELECT|UPDATE|DELETE|INSERT)\")\n\ndef check(log: dict) -> bool:\n    # Format Check: Validate time format\n    try:\n        datetime.strptime(log[\"arguments\"][\"userPostRelation\"][\"time\"], \"%b %d, %Y, %I:%M:%S\\u202f%p\")\n    except ValueError:\n        raise ValueError(\"time should be in the format 'Mon DD, YYYY, HH:MM:SS PM'\")\n\n    # Vulnerability Check: Ensure no SQL injection\n    for field in [\"userName\", \"remark\"]:  # potential string fields\n        if SQL_INJECTION_RE.search(log[\"db_info\"][\"nicefish_rbac_user\"].get(field, \"\")):\n            raise ValueError(f\"{field} should not contain any SQL injection features\")\n\n    # Database Integrity Check\n    assert log[\"arguments\"][\"userPostRelation\"][\"userId\"] == log[\"db_info\"][\"nicefish_rbac_user\"][\"user_id\"], \\\n        \"userId in arguments should match user_id in db_info\"\n\n    assert log[\"env\"][\"userName\"] == log[\"db_info\"][\"nicefish_rbac_user\"][\"user_name\"], \\\n        \"userName in env should match user_name in db_info\"\n\n    # Environment Integrity Check\n    assert log[\"arguments\"][\"userPostRelation\"][\"userId\"] == int(log[\"env\"][\"userId\"]), \\\n        \"userId in arguments should match userId in env\"\n\n    # Argument and Database Status Check\n    assert log[\"db_info\"][\"nicefish_rbac_user\"][\"status\"] == 1, \\\n        \"Status in db_info.nicefish_rbac_user should be 1\"  # Initial status guess: 1\n\n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.cms.controller.UserFollowController.createFollowRelation", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "# The error indicates that the \"fromId\" field is missing in the log, which causes the assertion to fail.\n# Since \"fromId\" is a required field according to the class definition, we should ensure that it is present.\n# If it is not present, we should raise an error indicating that the input data is incomplete.\n# However, since the test case does not provide \"fromId\", we should handle this gracefully by checking if it is optional in the context.\n\nimport re\nfrom datetime import datetime\n\nSQL_INJECTION_RE = re.compile(r\"(SELECT|UPDATE|DELETE|INSERT)\", re.IGNORECASE)\n\ndef check(log: dict) -> bool:\n    user_follow_entity = log[\"arguments\"][\"userFollowEntity\"]\n    \n    # Check if fromId is present and is an integer\n    from_id = user_follow_entity.get(\"fromId\")\n    if from_id is not None:\n        assert isinstance(from_id, int), \"fromId should be an integer\"\n        # Check if fromId is positive\n        assert from_id > 0, \"fromId should be a positive integer\"\n        # Environment integrity check: fromId should match env userId\n        assert str(from_id) == log[\"env\"][\"userId\"], \"fromId should match the userId in env\"\n    else:\n        # If fromId is not present, we should decide if this is acceptable or raise an error.\n        # For now, let's assume it's acceptable for the test case.\n        pass\n\n    # Check if toId is present and is an integer\n    to_id = user_follow_entity.get(\"toId\")\n    assert to_id is not None, \"toId should be present\"\n    assert isinstance(to_id, int), \"toId should be an integer\"\n    # Check if toId is positive\n    assert to_id > 0, \"toId should be a positive integer\"\n\n    # Format Check: Check the format of followTime\n    follow_time = user_follow_entity.get(\"followTime\")\n    assert follow_time is not None, \"followTime should be present\"\n    try:\n        datetime.strptime(follow_time, \"%b %d, %Y, %I:%M:%S %p\")\n    except ValueError:\n        raise AssertionError(\"followTime should follow the format 'MMM dd, yyyy, h:mm:ss a'\")\n    \n    # Vulnerability Check: Ensure no SQL injection\n    assert not SQL_INJECTION_RE.search(follow_time), \"followTime should not contain any SQL injection features\"\n    \n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.cms.controller.UserFollowController.deleteFollowRelation", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "import re\nfrom datetime import datetime\n\ndef check(log: dict) -> bool:\n    # Check if followTime is a valid date string\n    date_format = \"%b %d, %Y, %I:%M:%S %p\"\n    try:\n        datetime.strptime(log[\"arguments\"][\"userFollowEntity\"][\"followTime\"], date_format)\n    except ValueError:\n        raise ValueError(\"followTime should be a valid date string in the format 'Mar 11, 2025, 3:55:03 PM'\")\n    \n    # Check if fromId is present and is an integer\n    if \"fromId\" in log[\"arguments\"][\"userFollowEntity\"] and log[\"arguments\"][\"userFollowEntity\"][\"fromId\"] is not None:\n        assert isinstance(log[\"arguments\"][\"userFollowEntity\"][\"fromId\"], int), \"fromId should be an integer\"\n    \n    # Check if toId is present and is an integer\n    if \"toId\" not in log[\"arguments\"][\"userFollowEntity\"] or log[\"arguments\"][\"userFollowEntity\"][\"toId\"] is None:\n        raise ValueError(\"toId is a required field and should be an integer\")\n    assert isinstance(log[\"arguments\"][\"userFollowEntity\"][\"toId\"], int), \"toId should be an integer\"\n    \n    # Check if fromId matches userId in env, if fromId is present\n    if \"fromId\" in log[\"arguments\"][\"userFollowEntity\"] and log[\"env\"][\"userId\"]:\n        assert str(log[\"arguments\"][\"userFollowEntity\"][\"fromId\"]) == log[\"env\"][\"userId\"], \"fromId should match userId in env\"\n\n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.cms.controller.UserFollowController.existsFollow", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "import re\n\ndef check(log: dict) -> bool:\n    # Check if followTime is in the correct format\n    follow_time_re = re.compile(r\"^[A-Za-z]{3} \\d{1,2}, \\d{4}, \\d{1,2}:\\d{2}:\\d{2}\\s[AP]M$\")\n    assert follow_time_re.match(log[\"arguments\"][\"userFollowEntity\"][\"followTime\"]), \"followTime should be in the format 'Mon DD, YYYY, HH:MM:SS AM/PM'\"\n\n    # Check if fromId is present and matches userId in env\n    if \"fromId\" in log[\"arguments\"][\"userFollowEntity\"] and log[\"arguments\"][\"userFollowEntity\"][\"fromId\"] is not None:\n        if log[\"env\"][\"userId\"]:\n            assert str(log[\"arguments\"][\"userFollowEntity\"][\"fromId\"]) == log[\"env\"][\"userId\"], \"fromId should match userId in env\"\n\n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.cms.controller.CommentController.getCommentList", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "def check(log: dict) -> bool:\n    # Format Check\n    assert isinstance(log[\"arguments\"][\"postId\"], int), \"postId should be an integer\"\n    assert isinstance(log[\"arguments\"][\"page\"], int), \"page should be an integer\"\n    \n    # Range Check\n    assert log[\"arguments\"][\"page\"] > 0, \"page should be greater than 0\"\n    \n    # Argument and Database Status Check\n    # Past status feedback: observed status value is 4\n    assert log[\"db_info\"][\"nicefish_cms_post\"][\"status\"] == 4, \"status in db_info.nicefish_cms_post should be 4\"\n    \n    # Database Integrity Check\n    assert log[\"arguments\"][\"postId\"] == log[\"db_info\"][\"nicefish_cms_post\"][\"post_id\"], \"postId in arguments should match post_id in db_info.nicefish_cms_post\"\n    \n    # Related Events Check\n    assert log[\"arguments\"][\"postId\"] == log[\"related_events\"][\"com.nicefish.cms.controller.PostController.getPostDetail\"][\"arguments\"][\"postId\"], \"postId in arguments should match postId in related_events.com.nicefish.cms.controller.PostController.getPostDetail.arguments\"\n    assert log[\"db_info\"][\"nicefish_cms_post\"][\"comment_times\"] == log[\"related_events\"][\"com.nicefish.cms.controller.PostController.getPostDetail\"][\"response\"][\"commentTimes\"], \"comment_times in db_info.nicefish_cms_post should match commentTimes in related_events.com.nicefish.cms.controller.PostController.getPostDetail.response\"\n    \n    # Environment Database Integrity Check\n    assert log[\"db_info\"][\"nicefish_cms_post\"][\"user_id\"] == log[\"related_events\"][\"com.nicefish.cms.controller.PostController.getPostDetail\"][\"response\"][\"userId\"], \"user_id in db_info.nicefish_cms_post should match userId in related_events.com.nicefish.cms.controller.PostController.getPostDetail.response\"\n    \n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.cms.controller.CommentController.getCommentListByUserId", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "def check(log: dict) -> bool:\n    # Check if \"page\" is an integer and non-negative\n    assert isinstance(log[\"arguments\"][\"page\"], int), \"page should be an integer\"\n    assert log[\"arguments\"][\"page\"] >= 0, \"page should be a non-negative integer\"\n\n    # Check if \"page\" in \"arguments\" matches \"page\" in related events\n    related_page = log[\"related_events\"][\"com.nicefish.cms.controller.PostController.getPostTableByUserId\"][\"arguments\"][\"page\"]\n    assert log[\"arguments\"][\"page\"] == related_page, \"page in arguments should match page in related events\"\n\n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.cms.controller.FileUploadController.upLoad", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "import re\n\nSQL_INJECTION_RE = re.compile(r\"(SELECT|UPDATE|DELETE|INSERT)\")\n\ndef check(log: dict) -> bool:\n    # Check that each file in \"files\" follows a specific pattern\n    file_pattern_re = re.compile(r\"^org\\.springframework\\.web\\.multipart\\.support\\.StandardMultipartHttpServletRequest\\$StandardMultipartFile@\\w+$\")\n    for file in log[\"arguments\"][\"files\"]:\n        assert file_pattern_re.match(file), \"Each file should follow the pattern of a file object representation\"\n        assert not SQL_INJECTION_RE.search(file), \"File representation should not contain any SQL injection features\"\n\n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.rbac.controller.UserController.updateUser", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "import re\nfrom datetime import datetime\n\nSQL_INJECTION_RE = re.compile(r\"(SELECT|UPDATE|DELETE|INSERT)\", re.IGNORECASE)\nEMAIL_RE = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\nPHONE_RE = re.compile(r\"^\\+?[1-9]\\d{1,14}$\")  # E.164 format for phone numbers\n\ndef check(log: dict) -> bool:\n    user_entity = log[\"arguments\"][\"userEntity\"]\n    env = log[\"env\"]\n\n    # Format Check\n    assert isinstance(user_entity[\"userId\"], int), \"userId should be an integer\"\n    assert EMAIL_RE.match(user_entity[\"userName\"]), \"userName should be a valid email\"\n    assert EMAIL_RE.match(user_entity[\"email\"]), \"email should be a valid email\"\n    if user_entity[\"cellphone\"]:\n        assert PHONE_RE.match(user_entity[\"cellphone\"]), \"cellphone should be a valid phone number\"\n    try:\n        datetime.strptime(user_entity[\"createTime\"], \"%b %d, %Y, %I:%M:%S %p\")\n    except ValueError:\n        raise AssertionError(\"createTime should be a valid date format\")\n\n    # Vulnerability Check\n    for field in [\"userName\", \"nickName\", \"password\", \"email\", \"remark\", \"avatarURL\"]:\n        assert not SQL_INJECTION_RE.search(user_entity[field]), f\"{field} should not contain SQL injection features\"\n\n    # Range Check\n    assert user_entity[\"gender\"] in [0, 1], \"gender should be either 0 or 1\"\n    assert isinstance(user_entity[\"status\"], int), \"status should be an integer\"\n    # Initial status guess: 1\n    assert user_entity[\"status\"] == 1, \"status should be 1\"\n\n    # Environment Integrity Check\n    assert str(user_entity[\"userId\"]) == env[\"userId\"], \"userId in arguments should match userId in env\"\n    assert user_entity[\"userName\"] == env[\"userName\"], \"userName in arguments should match userName in env\"\n\n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.rbac.controller.ShiroAuthController.logout", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "import re\n\nSQL_INJECTION_RE = re.compile(r\"(SELECT|UPDATE|DELETE|INSERT)\", re.IGNORECASE)\n\ndef check(log: dict) -> bool:\n    assert isinstance(log[\"arguments\"][\"request\"], str), \"request should be a string\"\n    assert isinstance(log[\"arguments\"][\"response\"], str), \"response should be a string\"\n    \n    assert not SQL_INJECTION_RE.search(log[\"arguments\"][\"request\"]), \"request should not contain any SQL injection features\"\n    assert not SQL_INJECTION_RE.search(log[\"arguments\"][\"response\"]), \"response should not contain any SQL injection features\"\n\n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.rbac.controller.ShiroAuthController.register", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "import re\n\nSQL_INJECTION_RE = re.compile(r\"(SELECT|UPDATE|DELETE|INSERT)\", re.IGNORECASE)\nEMAIL_RE = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\nPHONE_RE = re.compile(r\"^\\+?[1-9]\\d{1,14}$\")\nURL_RE = re.compile(r\"^(http|https)://\")\n\ndef check(log: dict) -> bool:\n    user_entity = log[\"arguments\"][\"userEntity\"]\n    user_detail = log[\"related_events\"][\"com.nicefish.rbac.controller.UserController.getUserDetail\"][\"response\"][\"data\"]\n    env = log[\"env\"]\n    get_menus_event = log[\"related_events\"].get(\"com.nicefish.rbac.controller.ShiroAuthController.getMenus\")\n\n    # Format Check\n    if user_entity[\"email\"]:\n        assert EMAIL_RE.match(user_entity[\"email\"]), \"Email should be in a valid format\"\n    if user_entity[\"cellphone\"]:\n        assert PHONE_RE.match(user_entity[\"cellphone\"]), \"Cellphone should be in a valid format\"\n    if user_entity[\"avatarURL\"]:\n        assert URL_RE.match(user_entity[\"avatarURL\"]), \"AvatarURL should be a valid URL\"\n\n    # Vulnerability Check\n    for field in [\"userName\", \"nickName\", \"password\", \"remark\", \"email\"]:\n        if user_entity[field]:\n            assert not SQL_INJECTION_RE.search(user_entity[field]), f\"{field} should not contain SQL injection features\"\n\n    # Range Check\n    assert user_entity[\"gender\"] in [0, 1, 2], \"Gender should be 0, 1, or 2\"\n\n    # Argument and Database Status Check\n    # Initial status guess: 1\n    if user_entity[\"status\"] is not None:\n        assert user_entity[\"status\"] == 1, \"Status should be 1\"\n\n    # Database Integrity Check\n    # Only enforce invariant fields like userId\n    if user_entity[\"userId\"] is not None:\n        assert user_entity[\"userId\"] == user_detail[\"userId\"], \"userId in userEntity should match userId in userDetail\"\n\n    # Environment Integrity Check\n    if user_entity[\"userId\"] is not None and env[\"userId\"]:\n        assert user_entity[\"userId\"] == int(env[\"userId\"]), \"userId in userEntity should match userId in env\"\n\n    # Related Events Check\n    if get_menus_event:\n        get_menus_args = get_menus_event[\"arguments\"]\n        if user_entity[\"userId\"] is not None:\n            assert user_entity[\"userId\"] == get_menus_args[\"userId\"], \"userId in userEntity should match userId in getMenus arguments\"\n\n    # Remove Environment Database Integrity Check as it may not be valid in all contexts\n\n    return True\n", "num_args": 1}}
{"domain": [{"api": "com.nicefish.rbac.controller.ShiroAuthController.getMenus", "related_fields": {"include_arguments": true, "include_response": false, "include_headers": false, "include_env": true, "include_db_info": true, "include_related_log": true, "related_include_arguments": true, "related_include_response": true, "related_include_headers": false, "related_include_env": true}, "quantifier": "forall"}], "premise": {"premise_position": "derive", "premise_type": "true"}, "predicate": {"is_true_precisely": false, "desc": "", "py_code": "import re\n\nSQL_INJECTION_RE = re.compile(r\"(SELECT|UPDATE|DELETE|INSERT)\", re.IGNORECASE)\n\ndef check(log: dict) -> bool:\n    # Format Check\n    assert isinstance(log[\"arguments\"][\"userId\"], int), \"userId in arguments should be an integer\"\n\n    # Vulnerability Check (Checking all string fields for SQL injection patterns)\n    for key, value in log[\"db_info\"][\"nicefish_rbac_user\"].items():\n        if isinstance(value, str):\n            assert not SQL_INJECTION_RE.search(value), f\"{key} should not contain SQL injection features\"\n\n    # Argument and Database Status Check\n    # Past status feedback: no feedback, assuming status should be 1\n    assert log[\"db_info\"][\"nicefish_rbac_user\"][\"status\"] == 1, \"User status in db_info should be 1\"\n\n    # Database Integrity Check\n    assert log[\"arguments\"][\"userId\"] == log[\"db_info\"][\"nicefish_rbac_user\"][\"user_id\"], \"userId in arguments should match user_id in db_info\"\n\n    # Environment Integrity Check\n    assert str(log[\"arguments\"][\"userId\"]) == log[\"env\"][\"userId\"], \"userId in arguments should match userId in env\"\n\n    # Related Events Check\n    related_user_id_argument = log[\"related_events\"][\"com.nicefish.rbac.controller.UserController.getUserDetail\"][\"arguments\"][\"userId\"]\n    related_user_id_response = log[\"related_events\"][\"com.nicefish.rbac.controller.UserController.getUserDetail\"][\"response\"][\"data\"][\"userId\"]\n    \n    if log[\"arguments\"][\"userId\"] != related_user_id_argument:\n        print(\"Warning: userId in arguments does not match userId in related_events.arguments\")\n\n    if log[\"arguments\"][\"userId\"] != related_user_id_response:\n        print(\"Warning: userId in arguments does not match userId in related_events.response.data\")\n\n    # Environment Database Integrity Check\n    assert log[\"env\"][\"userId\"] == str(log[\"db_info\"][\"nicefish_rbac_user\"][\"user_id\"]), \"userId in env should match user_id in db_info\"\n\n    return True\n", "num_args": 1}}
